#!/usr/bin/env python3
"""
CPP Visual Report Kit - Comprehensive PDF Generator
Combines all 8 charts plus executive summary into a single professional PDF
"""

import os
import sys
from pathlib import Path
from PIL import Image
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import datetime

def create_comprehensive_pdf(export_dir, case_name="AuroraSkin & Laser", output_filename="AuroraSkin_Complete_Analysis.pdf"):
    """
    Create a comprehensive PDF with all charts and analysis
    """
    
    # Setup paths
    export_path = Path(export_dir)
    output_path = export_path / output_filename
    
    # Chart files in order
    chart_files = [
        ("01_EBITDA_Bridge.png", "EBITDA Bridge Analysis", "TTM normalization waterfall showing path from reported to adjusted EBITDA"),
        ("02_Valuation_Matrix.png", "Valuation Matrix", "Enterprise and equity values across multiple scenarios (7.0x - 10.0x)"),
        ("03_EPV_Panel.png", "Earnings Power Value Analysis", "Intrinsic value calculation with WACC and reinvestment sensitivity"),
        ("04_LBO_Summary.png", "LBO Analysis Summary", "Sources & uses, debt schedule, and projected returns analysis"),
        ("05_KPI_Dashboard.png", "Key Performance Indicators", "Operational metrics with performance benchmarks and targets"),
        ("06_Monte_Carlo.png", "Monte Carlo Simulation", "10,000-iteration risk analysis with statistical distributions"),
        ("07_Scenario_Analysis.png", "Scenario Analysis", "Base, downside, and upside case modeling with equity impact"),
        ("08_Sensitivity_Tornado.png", "Sensitivity Analysis", "IRR impact ranking of key value drivers")
    ]
    
    # Create PDF document
    doc = SimpleDocTemplate(str(output_path), pagesize=A4, 
                          rightMargin=0.75*inch, leftMargin=0.75*inch,
                          topMargin=1*inch, bottomMargin=1*inch)
    
    # Styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        textColor=colors.HexColor('#1f4e79'),
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#2e5090'),
        spaceAfter=20,
        spaceBefore=30,
        fontName='Helvetica-Bold'
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=11,
        textColor=colors.black,
        spaceAfter=12,
        fontName='Helvetica'
    )
    
    # Story elements
    story = []
    
    # Title page
    story.append(Paragraph(f"{case_name}", title_style))
    story.append(Paragraph("Comprehensive Investment Analysis", subtitle_style))
    story.append(Spacer(1, 0.5*inch))
    
    # Executive summary
    story.append(Paragraph("Executive Summary", subtitle_style))
    story.append(Paragraph(
        f"This comprehensive analysis of {case_name} presents a detailed financial evaluation "
        "including TTM performance normalization, multiple valuation approaches, LBO modeling, "
        "and risk assessment through Monte Carlo simulation and scenario analysis.", 
        body_style
    ))
    
    # Key metrics summary
    story.append(Paragraph("Key Financial Metrics (TTM 2024-Q3 ‚Üí 2025-Q2)", subtitle_style))
    story.append(Paragraph("‚Ä¢ TTM Revenue: $8.75M", body_style))
    story.append(Paragraph("‚Ä¢ Adjusted EBITDA: $1.81M (20.6% margin)", body_style))
    story.append(Paragraph("‚Ä¢ Base Case Valuation (8.5x): $15.35M EV / $13.32M Equity", body_style))
    story.append(Paragraph("‚Ä¢ EPV Intrinsic Value: $9.13M EV / $7.10M Equity", body_style))
    story.append(Paragraph("‚Ä¢ LBO Returns: 22.8% IRR / 2.8x MoIC", body_style))
    
    story.append(Spacer(1, 0.5*inch))
    story.append(Paragraph(f"Analysis Date: {datetime.datetime.now().strftime('%B %d, %Y')}", body_style))
    story.append(Paragraph("Generated by CPP Visual Report Kit", body_style))
    
    story.append(PageBreak())
    
    # Add each chart with description
    for filename, title, description in chart_files:
        chart_path = export_path / filename
        
        if chart_path.exists():
            # Chart title
            story.append(Paragraph(title, subtitle_style))
            story.append(Paragraph(description, body_style))
            story.append(Spacer(1, 0.2*inch))
            
            # Add chart image
            try:
                # Calculate image size to fit page
                img = Image.open(chart_path)
                img_width, img_height = img.size
                
                # Scale to fit page width (6.5 inches available)
                max_width = 6.5 * inch
                max_height = 8 * inch
                
                scale_w = max_width / img_width
                scale_h = max_height / img_height
                scale = min(scale_w, scale_h)
                
                new_width = img_width * scale
                new_height = img_height * scale
                
                story.append(RLImage(str(chart_path), width=new_width, height=new_height))
                story.append(Spacer(1, 0.3*inch))
                
                # Page break after each chart (except the last one)
                if filename != chart_files[-1][0]:
                    story.append(PageBreak())
                    
            except Exception as e:
                story.append(Paragraph(f"Error loading chart: {str(e)}", body_style))
                story.append(Spacer(1, 0.5*inch))
        else:
            story.append(Paragraph(f"Chart not found: {filename}", body_style))
            story.append(Spacer(1, 0.5*inch))
    
    # Build PDF
    try:
        doc.build(story)
        print(f"‚úÖ Comprehensive PDF created: {output_path}")
        return str(output_path)
    except Exception as e:
        print(f"‚ùå Error creating PDF: {str(e)}")
        return None

def main():
    if len(sys.argv) < 2:
        print("Usage: python create_comprehensive_pdf.py <export_directory> [case_name] [output_filename]")
        sys.exit(1)
    
    export_dir = sys.argv[1]
    case_name = sys.argv[2] if len(sys.argv) > 2 else "AuroraSkin & Laser"
    output_filename = sys.argv[3] if len(sys.argv) > 3 else "AuroraSkin_Complete_Analysis.pdf"
    
    if not os.path.exists(export_dir):
        print(f"‚ùå Export directory not found: {export_dir}")
        sys.exit(1)
    
    pdf_path = create_comprehensive_pdf(export_dir, case_name, output_filename)
    
    if pdf_path and os.path.exists(pdf_path):
        print(f"üìÑ PDF successfully created with {len([f for f in os.listdir(export_dir) if f.endswith('.png')])} charts")
        print(f"üìÅ Location: {pdf_path}")
        
        # Try to open the PDF
        try:
            if sys.platform == "darwin":  # macOS
                os.system(f"open '{pdf_path}'")
            elif sys.platform == "win32":  # Windows
                os.system(f"start '{pdf_path}'")
            else:  # Linux
                os.system(f"xdg-open '{pdf_path}'")
            print("üîç PDF opened for viewing")
        except Exception as e:
            print(f"üí° Please manually open: {pdf_path}")
    else:
        print("‚ùå Failed to create PDF")
        sys.exit(1)

if __name__ == "__main__":
    main() 